Define the Subproblem:
    Let C[i] be the maximum amount of money that can be collected from the first i coins.

Recursive Relation:
    For each coin at position i, you have two choices:
        Do not pick the i-th coin, in which case the maximum amount is C[i-1].
        Pick the i-th coin, in which case you cannot pick the (i-1)-th coin, and the maximum amount is C[i-2] + value of i-th coin.
    Therefore, the recurrence relation is: 𝐶[𝑖]=max(𝐶[𝑖−1],𝐶[𝑖−2]+value of i-th coin)

Base Cases:
    C[0] = 0 (if there are no coins, the maximum value is 0)
    C[1] = \text{value of the first coin} (if there is only one coin, the maximum value is the value of that coin)

Compute the Solution:
    Use the above relation to compute C[i] for all i from 1 to n.

Final Result:
    The result will be stored in C[n], which represents the maximum amount of money that can be collected from all the coins.

Algorithm CoinRow(coins[0 ... n-1])
    Input: Array coins[0 ... n-1] representing the values of coins in a row
    Output: Maximum sum of values that can be collected from the row of coins without picking two adjacent coins

    Initialization:
        Let n be the length of the coins array.
        If n == 0, return 0 (no coins to select).
        If n == 1, return coins[0] (only one coin available).

    Define DP Table:
        Initialize an array dp[0 ... n-1] where dp[i] represents the maximum value obtained from the first i+1 coins.

    Base Cases:
        Set dp[0] = coins[0] (only one coin, so maximum is coins[0]).
        Set dp[1] = max(coins[0], coins[1]) (choose the maximum of the first two coins).

    Fill DP Table:
        For each i from 2 to n-1:
            Compute dp[i] = max(dp[i-1], coins[i] + dp[i-2]).
            dp[i-1] represents the maximum value without including the current coin.
            coins[i] + dp[i-2] represents the maximum value by including the current coin (thus skipping the previous one).
    Return Result:
        Return dp[n-1], which is the maximum value obtained from the entire row of coins.

Algorithm Coin_Row_problem(n):
    F(0) <- 0
    F(1) <- c[1]
    for i <- 2 to n-1 do
        F(i) <- max[c(i) + F(i-2), F(i-2)]   
    return F(n)