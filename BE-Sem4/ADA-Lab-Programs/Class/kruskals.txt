Initialization:
    parent: A list to keep track of the parent of each vertex. Initially, each vertex is its own parent.
    edges: A list to store edges along with their weights.
    mst_edges: To store the edges included in the MST.
    total_cost: To accumulate the total weight of the MST.

Edge Sorting:
    Sort all edges by weight to ensure the smallest edges are processed first.
    Union-Find Data Structure:

    find(i): Finds the root of the vertex i with path compression.
    union(u, v): Merges the sets containing vertices u and v if they are not already in the same set.
    Kruskal's Algorithm Execution:

    Iterate over sorted edges and use union-find to check if adding an edge would form a cycle.
    If no cycle is formed, add the edge to the MST and update the total cost.
    Stop when the MST has n-1 edges.

Result:
    The algorithm returns the edges included in the MST and the total cost.

Algorithm Kruskal'sAlgorithm
    Input: Number of vertices n, cost adjacency matrix cost.
    Output: Minimum cost spanning tree (MST) and its total cost.

    Kruskal(n, cost)
        for each vertex i in 1 to n do
            parent[i] <- 0
        
        while number of edges in MST < n - 1 do
            find the edge (a, b) with minimum cost such that a and b are in different components
            u <- Find(a)
            v <- Find(b)
            if Union(u, v) is true then
                add edge (a, b) to MST
                increase edge count
                add cost of edge (a, b) to total cost
            mark edge (a, b) as used

        return MST and total cost

    Find(i)
        while parent[i] != 0 do
            i <- parent[i]
        return i

    Union(u, v)
        if u != v then
            parent[v] <- u
            return true
        return false