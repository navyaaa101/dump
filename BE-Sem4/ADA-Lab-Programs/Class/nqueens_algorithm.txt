solveNQueens(board, col): This function tries to place a queen in all rows one by one in the current column. If placing the queen in one row leads to a solution, it returns true. If placing the queen in all rows doesn't lead to a solution, it returns false.
isSafe(board, row, col): This function checks if a queen can be placed on board[row][col]. It checks the row, the upper diagonal, and the lower diagonal on the left side.
printSolution(board): This function prints the board configuration where 1 indicates the position of a queen and 0 indicates an empty space.
main logic: Initializes the board and calls solveNQueens for the first column. If no solution exists, it prints "Solution does not exist".

Algorithm N-Queens Problem():
    Input: An integer `N` representing the size of the chessboard (NxN) and the number of queens to place.  
    Output: All possible solutions where N queens are placed on the board such that no two queens attack each other.

    1. Initialize a 2D array `board` of size `N x N` to store the positions of the queens.
    2. Define a function `isSafe(board, row, col, N)` to check if a queen can be placed on `board[row][col]`.
        - for `i <- 0` to `col-1` do
            - if `board[row][i] = 1` then
                - return `False`
        - for `i <- row, j <- col` to `i >= 0, j >= 0` do
            - if `board[i][j] = 1` then
                - return `False`
        - for `i <- row, j <- col` to `i < N, j >= 0` do
            - if `board[i][j] = 1` then
                - return `False`
        - return `True`

    3. Define a function `solveNQueens(board, col, N)` to solve the N-Queens problem using backtracking.
        - if `col >= N` then
            - print the board configuration
            - return `True`
        - for `i <- 0` to `N-1` do
            - if `isSafe(board, i, col, N)` then
                - set `board[i][col] <- 1`
                - if `solveNQueens(board, col + 1, N)` then
                    - return `True`
                - set `board[i][col] <- 0`  // backtrack
        - return `False`

    4. Initialize `board` with all zeros.
    5. Call `solveNQueens(board, 0, N)` to find all solutions.